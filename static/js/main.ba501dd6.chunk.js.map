{"version":3,"sources":["DeckContext.tsx","Player.tsx","Dealer.tsx","PlayersContext.tsx","HitButton.tsx","StayButton.tsx","AceButton.tsx","PlayerScore.tsx","PlayerBank.tsx","Hand.tsx","Ranks.tsx","handTotal.tsx","PlayerPanel.tsx","DealerPanel.tsx","Suits.tsx","Card.tsx","CardDeck.tsx","NewGameButton.tsx","Table.tsx","dealCards.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DeckContext","React","createContext","index","Player","_hand","_score","_bank","_hasAce","_hasStayed","this","hand","score","bank","hasAce","hasStayed","Dealer","PlayersContext","allDone","HitButton","props","id","player","onClick","hitBtnClick","disabled","stayedStatus","StayButton","stayBtnClick","AceButton","aceBtnClick","aceStatus","PlayerScore","className","PlayerBank","Hand","cards","Ranks","A","2","3","4","5","6","7","8","9","10","J","Q","K","handTotal","total","i","length","card","rank","PlayerPanel","deckContext","useContext","playersContext","deck","playerHand","data","useState","setHand","setScore","event","cardValue","push","hitBtnId","hitButton","document","querySelector","hitButtons","querySelectorAll","aceBtnId","aceButton","numStays","numHitButtons","hasAttribute","hiddenCard","hiddenCards","dealerScore","style","visibility","DealerPanel","Suits","Clubs","Diamonds","Hearts","Spades","Card","cardClass","suit","join","CardDeck","numberDecks","suits","Object","values","ranks","keys","NewGameButton","newGameBtnClick","Table","cardDeck","dealer","console","log","players","dealCards","numPlayers","j","App","arrayIndex","generateRandomNumberArray","arrayLength","maxNumber","numberArray","randomNumber","Math","floor","random","generateRandomNumber","deckLength","shuffledArray","shuffledDeck","shuffleDeck","dealerPanel","playerPanels","createPlayers","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba501dd6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst DeckContext = React.createContext({\r\n    index: 0\r\n});\r\n\r\nexport default DeckContext;","class Player {\r\n    private _hand: any;\r\n    private _score: number;\r\n    private _bank: number;\r\n    private _hasAce: boolean;\r\n    private _hasStayed: boolean;\r\n  \r\n    constructor() {\r\n      this._hand = [];\r\n      this._score = 0;\r\n      this._bank = 500;\r\n      this._hasAce = false;\r\n      this._hasStayed = false;\r\n    }\r\n  \r\n    get hand(): any {\r\n      return this._hand;\r\n    }\r\n  \r\n    set hand(hand: any) {\r\n      this._hand = hand;\r\n    }\r\n  \r\n    get score(): number {\r\n      return this._score;\r\n    }\r\n  \r\n    set score(score: number) {\r\n      this._score = score;\r\n    }\r\n  \r\n    get bank(): number {\r\n      return this._bank;\r\n    }\r\n  \r\n    set bank(bank: number) {\r\n      this._bank = bank;\r\n    }\r\n  \r\n    get hasAce(): boolean {\r\n        return this._hasAce;\r\n    }\r\n\r\n    set hasAce(hasAce: boolean) {\r\n        this._hasAce = hasAce;\r\n    }\r\n  \r\n    get hasStayed(): boolean {\r\n        return this._hasStayed;\r\n    }\r\n\r\n    set hasStayed(hasStayed: boolean) {\r\n        this._hasStayed = hasStayed;\r\n    }\r\n}\r\n\r\nexport default Player;  ","class Dealer {\r\n    private _hand: any;\r\n    private _score: number;\r\n    private _hasAce: boolean;\r\n\r\n    constructor(){\r\n        this._hand = [];\r\n        this._score = 0;\r\n        this._hasAce = false;\r\n    }\r\n  \r\n    get hand(): any {\r\n        return this._hand;\r\n    }\r\n    \r\n    set hand(hand: any) {\r\n        this._hand = hand;\r\n    }\r\n\r\n    get score(): number {\r\n        return this._score;\r\n    }\r\n\r\n    set score(score: number) {\r\n        this._score = score;\r\n    }\r\n   \r\n    get hasAce(): boolean {\r\n        return this._hasAce;\r\n    }\r\n\r\n    set hasAce(hasAce: boolean) {\r\n        this._hasAce = hasAce;\r\n    }\r\n}\r\n\r\nexport default Dealer;","import React from 'react';\r\n\r\nconst PlayersContext = React.createContext({\r\n    allDone: false\r\n});\r\n\r\nexport default PlayersContext;","import React from 'react';\r\n\r\nconst HitButton = ( props: any ): any => {\r\n    return (\r\n      <div>\r\n        <button id={ 'hitBtn' + props.player } onClick={ props.hitBtnClick } disabled={ props.stayedStatus }>\r\n          hit\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n  \r\nexport default HitButton; ","import React from 'react';\r\n\r\nconst StayButton = ( props: any ): any => {\r\n    return (\r\n      <div>\r\n        <button id={ 'stayBtn' + props.player } onClick={ props.stayBtnClick }>\r\n          stay\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default StayButton;","import React from 'react';\r\n\r\nconst AceButton = ( props: any ): any => {  \r\n    return (\r\n      <div>\r\n        <button id={ 'aceBtn' + props.player } onClick={ props.aceBtnClick } disabled={ !props.aceStatus }>\r\n          Make Ace 11\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default AceButton;","import React from 'react';\r\n\r\nconst PlayerScore = ( props:any ): any => {\r\n    return (\r\n        <div id={ 'score' + props.player } className=\"score\">\r\n          <span>\r\n            score: \r\n          </span>\r\n          { props.score }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerScore;","import React from 'react';\r\n\r\nconst PlayerBank = ( props:any ): any => {\r\n    return (\r\n        <div id={ 'bank' + props.player } className=\"bank\">\r\n          <div>\r\n            bank: \r\n          </div>\r\n          <div>\r\n            $ { props.bank }\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerBank;","import React from 'react';\r\n\r\nconst Hand = ( props: any ): any => {\r\n    return (\r\n      <div id={ 'hand' + props.player } className=\"cards\">\r\n        { props.cards }\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default Hand;","const Ranks: any = {\r\n    A : 1,\r\n    2 : 2,\r\n    3 : 3,\r\n    4 : 4,\r\n    5 : 5,\r\n    6 : 6,\r\n    7 : 7,\r\n    8 : 8,\r\n    9 : 9,\r\n    10 : 10,\r\n    J : 10,\r\n    Q : 10,\r\n    K : 10\r\n}\r\n\r\nexport default Ranks;","import Ranks from './Ranks';\r\n\r\nconst handTotal = ( cards: any ): number => {\r\n    let total: number = 0;\r\n  \r\n    for( let i = 0; i < cards.length; i++ ) {\r\n      let card: any = cards[ i ].props.rank;\r\n      total += Ranks[ card ];\r\n    }\r\n  \r\n    return total;\r\n}\r\n  \r\nexport default handTotal;","import React, { useState, useContext } from 'react';\r\nimport DeckContext from './DeckContext';\r\nimport PlayersContext from './PlayersContext';\r\nimport HitButton from './HitButton';\r\nimport StayButton from './StayButton';\r\nimport AceButton from './AceButton';\r\nimport PlayerScore from './PlayerScore';\r\nimport PlayerBank from './PlayerBank';\r\nimport Hand from './Hand';\r\nimport handTotal from './handTotal';\r\n\r\nconst PlayerPanel = ( props: any ): any => {\r\n  const deckContext = useContext( DeckContext );\r\n  const playersContext = useContext( PlayersContext );\r\n  const deck: any = props.deck;\r\n  const playerHand: any = props.data.hand;\r\n  const [hand, setHand] = useState( playerHand );\r\n  const [score, setScore] = useState( handTotal( hand ) );\r\n\r\n  const handleAceBtnClick = ( event: any ): void => {\r\n    const aceBtnId: string = '#aceBtn' + props.player;\r\n    const aceButton: any = document.querySelector( aceBtnId );\r\n\r\n    setScore( score + 10 );\r\n    aceButton.disabled = true;\r\n  }\r\n\r\n  const handleHitBtnClick = ( event: any ): any => {\r\n    let index: any = deckContext.index;\r\n    const card: any = deck[index];\r\n    const cardValue: number = handTotal( [card] );\r\n    playerHand.push( card );\r\n    setHand( playerHand );\r\n    setScore( score + cardValue );\r\n\r\n    deckContext.index += 1;\r\n  }\r\n\r\n  const handleStayBtnClick = (event: any): void => {\r\n    const hitBtnId: string = '#hitBtn' + props.player;\r\n    const hitButton: any = document.querySelector( hitBtnId );\r\n    const hitButtons: any = document.querySelectorAll( \"button[id^='hitBtn']\" );\r\n    const aceBtnId: string = '#aceBtn' + props.player;\r\n    const aceButton: any = document.querySelector( aceBtnId );\r\n\r\n    let numStays: number = 0;\r\n\r\n    hitButton.disabled = true;\r\n    aceButton.disabled = true;\r\n\r\n    let numHitButtons: number = hitButtons.length;\r\n    for (let i = 0; i < numHitButtons; i++) {\r\n      if ( hitButtons[i].hasAttribute('disabled') )\r\n        numStays++;\r\n    }\r\n\r\n    if (numStays === numHitButtons) {\r\n      const hiddenCard: any = document.querySelector('#handDealer div:first-child .left-corner');\r\n      const hiddenCards: any = document.querySelector('#handDealer div.card:nth-child(1n+3)');\r\n      const dealerScore: any = document.querySelector('#scoreDealer');\r\n      hiddenCard.style.visibility = 'visible';\r\n      if(hiddenCards) hiddenCards.style.visibility = 'visible';\r\n      dealerScore.style.visibility = 'visible';\r\n\r\n      playersContext.allDone = true;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id={ 'player' + props.player } className=\"playerArea\">\r\n      <div id={ 'player' + props.player + 'Buttons' } className=\"buttons\">\r\n        <HitButton player={ props.player } hitBtnClick={ handleHitBtnClick } />\r\n        <StayButton player={ props.player } stayBtnClick={ handleStayBtnClick } />\r\n      </div>\r\n      <br />\r\n      <div id={ 'player' + props.player + 'AceButton' } className=\"buttons\">\r\n        <AceButton player={ props.player } aceBtnClick={ handleAceBtnClick } aceStatus={ props.data.hasAce } />\r\n      </div>\r\n      <div id={ 'player' + props.player + 'Cards'} className=\"cardArea\">\r\n        <PlayerScore player={ props.player } score={ score } />\r\n        <Hand player={ props.player } cards={ props.data.hand } />\r\n      </div>\r\n      <div id={ 'player' + props.player + 'Bank' } className=\"bankArea\">\r\n        <PlayerBank player={ props.player } bank={ props.data.bank } />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PlayerPanel;","import React from 'react';\r\nimport PlayerScore from './PlayerScore';\r\nimport Hand from './Hand';\r\n\r\nconst DealerPanel = ( props: any ): any => {\r\n  return (\r\n      <div className=\"dealerRow\">\r\n        <div className=\"dealerArea\">\r\n          <div><PlayerScore player=\"Dealer\" score={ props.data.score } /></div>\r\n          <Hand player=\"Dealer\" cards={ props.data.hand } />\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default DealerPanel;","const Suits: any = {\r\n    Clubs : '\\u2663',\r\n    Diamonds : '\\u2666',\r\n    Hearts : '\\u2665',\r\n    Spades : '\\u2660'\r\n}\r\n\r\nexport default Suits;  ","import React from 'react';\r\nimport Suits from './Suits';\r\n\r\nconst Card = ( props: any ): any => {  \r\n    let cardClass: any = [ 'card' ];\r\n    cardClass.push( ( props.suit === Suits[ 'Diamonds' ] || props.suit === Suits[ 'Hearts' ] ) ? 'red' : 'black' );\r\n    cardClass = cardClass.join( ' ' );\r\n  \r\n    return (\r\n      <div className={ cardClass }>\r\n        <div className=\"left-corner\">\r\n          <div>{ props.rank }</div>\r\n          <div>{ props.suit }</div>\r\n        </div>\r\n        <div className=\"right-corner\">\r\n          <div className=\"invert\">{ props.suit }</div>\r\n          <div className=\"invert\">{ props.rank }</div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Suits from './Suits';\r\nimport Ranks from './Ranks';\r\nimport Card from './Card';\r\n\r\nconst deck: any = [];\r\n\r\nconst CardDeck = ( numberDecks: number ): any => {\r\n    const suits: any = Object.values( Suits );\r\n    const ranks: any = Object.keys( Ranks );\r\n  \r\n    for( let i = 0; i < numberDecks; i++ ) {\r\n      for( let suit of suits ) {\r\n        for( let rank of ranks ){\r\n          deck.push( <Card suit={ suit } rank={ rank } /> )\r\n        }\r\n      }\r\n    }\r\n  \r\n    return deck\r\n}\r\n  \r\nexport default CardDeck; ","import React from 'react';\r\n\r\nconst NewGameButton = ( props: any ): any => {\r\n    return (\r\n        <div className=\"newGameButton\">\r\n          <button id='newGameBtn' onClick={ props.newGameBtnClick }>\r\n            New Game\r\n          </button>\r\n        </div>\r\n      )\r\n  }\r\n\r\n  export default NewGameButton;","import React, { useState, useContext } from 'react';\r\nimport Dealer from './Dealer';\r\nimport Player from './Player';\r\nimport DeckContext from './DeckContext';\r\nimport NewGameButton from './NewGameButton';\r\nimport dealCards from './dealCards';\r\n\r\nconst Table = ( props: any ): any => {\r\n  const deckContext = useContext( DeckContext );\r\n  const deck: any = props.cardDeck;\r\n\r\n  const handleNewGameClick = () => {\r\n    console.log(deckContext.index);\r\n    console.log(deck);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"dealerSection\" className=\"bjTable\">\r\n        { props.dealer }\r\n      </div>\r\n      <NewGameButton newGameBtnClick={ handleNewGameClick } />\r\n      <div id=\"playerSection\" className=\"playersRow\">\r\n        { props.players }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n  \r\nexport default Table;","import handTotal from './handTotal';\r\n\r\nconst dealCards = ( players: any, dealer: any, deck: any, index: number ): void => {\r\n    const numPlayers: number = players.length;\r\n    const minDealerScore: number = 17;\r\n\r\n    for( let i = 0; i < 2; i++ ) {\r\n        for( let j = 0; j < numPlayers; j++ ) {\r\n          if( deck[index].props.rank === 'A' ) players[j].hasAce = true;\r\n          players[j].hand.push( deck[index] );\r\n          index++;\r\n        }\r\n        if( deck[index].props.rank === 'A' ) dealer.hasAce = true;\r\n        dealer.hand.push( deck[index++] );\r\n    }\r\n    let dealerScore: number = handTotal( dealer.hand );\r\n    dealer.score = dealer.hasAce ? dealerScore + 10 : dealerScore;\r\n    while( dealer.score < minDealerScore ){\r\n      index++;\r\n      let card: any = deck[index];\r\n      let cardValue: number = handTotal( [card] );\r\n      dealer.hand.push( card );\r\n      dealer.score += cardValue;\r\n    }\r\n}\r\n\r\nexport default dealCards;  ","import React, { useContext } from 'react';\nimport DeckContext from './DeckContext';\nimport Player from './Player';\nimport Dealer from './Dealer';\nimport PlayerPanel from './PlayerPanel';\nimport DealerPanel from './DealerPanel'\nimport cardDeck from './CardDeck';\nimport Table from '../src/Table';\nimport dealCards from './dealCards';\nimport './App.css';\n\nconst App = () => {\n  const deckContext = useContext( DeckContext );\n  const dealer: Dealer = new Dealer();\n  const players: Player[] = [];\n  const numPlayers: number = 5;\n  const numberDecks: number = 8;\n\n  let arrayIndex: number = 0;\n  var index: number = 0;\n    \n  const generateRandomNumber = ( maxNumber: number ): number => {\n      return Math.floor( Math.random() * maxNumber );\n  }\n  \n  const generateRandomNumberArray = ( arrayLength: number, maxNumber: number, numberArray: number[] ): number[] => {\n    if( arrayIndex < arrayLength ) {\n      let randomNumber: number = generateRandomNumber(maxNumber);\n      numberArray.push(randomNumber);\n      arrayIndex++;\n  \n      return generateRandomNumberArray(arrayLength, maxNumber, numberArray);\n    } else {\n      arrayIndex = 0;\n      return numberArray;\n    }\n  }\n  \n  const shuffleDeck = ( cardDeck: any ): any => {\n    const deckLength: number = cardDeck.length;\n    let shuffledArray: number[] = [];\n    const shuffledDeck: any = [];    \n  \n    generateRandomNumberArray(deckLength, deckLength, shuffledArray);\n  \n    for ( let i = 0; i < deckLength; i++) {\n      shuffledDeck.push( cardDeck[shuffledArray[ i ]] );\n    }\n  \n    return shuffledDeck;\n  }\n  \n  let deck: any = cardDeck( numberDecks );\n  deck = shuffleDeck( deck );\n\n  const createPlayers = (): void => {\n    for( let i = 0; i < numPlayers; i++ ) {\n      let player: Player = new Player();\n      players.push( player );\n    }\n  }\n\n\n  const startGame = () => {\n    createPlayers();\n    dealCards( players, dealer, deck, index );\n    console.log(index);\n  }\n\n  const dealerPanel: any = [];\n  const playerPanels: any = [];\n\n  if(deckContext.index === 0){\n    startGame();\n  }\n\n  dealerPanel.push( <DealerPanel data={ dealer } deck={ deck } /> );\n  for(let i = 0; i < numPlayers; i++){\n    playerPanels.push( <PlayerPanel player={ i } data={ players[i] } deck={ deck } />);\n  }\n\n  return (\n    <div className=\"game\">\n      <Table dealer={ dealerPanel } players={ playerPanels } cardDeck={ deck } />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}